(#uuid java.util.UUID/randomUUID)
(println "hi")
(printf "hi")
(require '[clojure.data.xml :as xml])
(xml/element :test {} "t")
(-> (xml/element :test {} "t") (xml/emit-str))
(-> (xml/element :test {:ts "t} "t") (xml/emit-str))
"
(-main)
(java.util.UUID.)
(def t (java.util.UUID.))
(def t (java.util.UUID/randomUUID))
t
(.toString t)
(doto (java.util.UUID/randomUUID) (.toString))
(-> (java.util.UUID/randomUUID) (.toString ,,,))
(doto (java.util.UUID/randomUUID) (.toString))
(doto (java.util.UUID/randomUUID.) (.toString))
(doto (java.util.UUID/randomUUID) (.toString))
(import java.text.SimpleDateFormat)
(.format (SimpleDateFormat. "yyyy-MM-dd HH:mm:ss")
)
(.format (SimpleDateFormat. "yyyy-MM-dd HH:mm:ss") (java.util.Date.))
(java.util.Date.)
(str (java.util.Date.))
(java.util.Date.)
(def x (java.util.Date.))
x
(.toString x)
x
(.toString x)
x
(.toString (new java.util.Date)
(.toString (new java.util.Date))
(.toString (new java.util.Date)
)
(.toString (new java.util.Date))
ls
(ring.util.time/http-date-formats)
ring.util.time/http-date-formats
(-main)
(def utc (java.time.ZoneOffset))
utc
(def utc (java.time.ZoneOffset.))
(import java.time)
(import java.time.)
(import java.time.ZoneOffset.)
(import java.time.ZoneOffset)
(.UTC ZoneOffset)
(UTC ZoneOffset)
(ZoneOffset/UTC)
(def utc (ZoneOffset/UTC))
(import java.time.format.DateTimeFormatter)
(import java.time.ZonedDateTime)
(def format (DateTimeFormatter/ISO_INSTANT)
)
(def format (DateTimeFormatter/ISO_INSTANT))
(ZonedDateTime/now UTC format)
(ZonedDateTime/now utc format)
format
utc
(ZonedDateTime/now)
(.toString ZonedDateTime/now)
(def db-spec {:dbtype "postgres" :dbname "domr" :user "domr" :port 54325 :passord "p0lokl.."})
db-spec
(-> db-spec :dbname)
(require [clojure.java.jdbc :as jdbc])
(require '[clojure.java.jdbc :as jdbc])
(jdbc/query db-spec ["SELECT 3*5 AS result"])
(def db-spec {:dbtype "postgres" :dbname "domr" :user "domr" :port 54325 :password "p0lokl.."})
(require '[clojure.java.jdbc :as jdbc])
(jdbc/query db-spec ["SELECT 3*5 AS result"])
(def fruit-table (jdbc/create-table-ddl :fruit [[:name "VARCHAR(12)"] [:color "VARCHAR(12)"] [:cost int] [:inStock :bool]]))
(def fruit-table (jdbc/create-table-ddl :fruit [[:name "VARCHAR(12)"] [:color "VARCHAR(12)"] [:cost :int] [:inStock :bool]]))
db-spec
fruit-table
(def fruit-table (jdbc/create-table-ddl :fruit [[:name "VARCHAR(12)"] [:color "VARCHAR(12)"] [:cost :int] [:inStock :bool]]))
(jdbc/create-table-ddl :fruit [[:name "VARCHAR(12)"] [:color "VARCHAR(12)"] [:cost :int] [:inStock :bool]])
(jdbc/execute! db-spec fruit-table)
(jdbc/insert db-spec {:name "Orange" :color "Orange" :cost 2 :inStock true})
(jdbc/insert! db-spec {:name "Orange" :color "Orange" :cost 2 :inStock true})
(jdbc/insert! db-spec :fruit {:name "Orange" :color "Orange" :cost 2 :inStock true})
(jdbc/insert! db-spec :fruit {:name "Orange" :color "orange" :cost 1 :inStock true})
(jdbc/insert! db-spec :fruit {:name "Pear" :color "green" :cost 2 :inStock false})
(jdbc/drop-table-ddl :fruit)
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute!))
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! ,,,))
(jdbc/drop-table-ddl :fruit)
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute!))
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! db-spec))
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! db-spec ,,,))
(jdbc/drop-table-ddl :fruit)
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! db-spec ,,,))
(jdbc/drop-table-ddl :fruit)
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! db-spec ,,,))
db-spec
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! db-spec ,,,))
(jdbc/execute! db-spec fruit-table)
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! db-spec ,,,))
(jdbc/execute! db-spec fruit-table)
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! db-spec))
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! db-spec ,,,))
db-spec
(-> (jdbc/drop-table-ddl :fruit) (jdbc/execute! db-spec ,,,))
(def dropt (jdbc/drop-table-ddl :fruit))
(-> dropt (jdbc/execute! db-spec ,,,))
(jdbc/execute! db-spec dropt)
(-> dropt (jdbc/execute! db-spec ,,,))
(jdbc/execute! db-spec dropt)
(-> (jdbc/create-table-ddl :fruit [[:name "VARCHAR(12)"] [:color "VARCHAR(12)"] [:cost :int] [:inStock :bool]]) (jdbc/execute! db-spec ,,,))
db-spex
(-> (jdbc/create-table-ddl :fruit [[:name "VARCHAR(12)"] [:color "VARCHAR(12)"] [:cost :int] [:inStock :bool]]) (jdbc/execute! db-spec ,,,))
(print-str "t")
(print-method (System/out)
)
(print-method (System/out))
(print-method (.printF System/out))
(print-method (.printf System/out))
(require '[org.clojure.java.jdbc])
(require '[org.clojure/java.jdbc :as jdbc])
(require '[clojure.java.jdbc :as jdbc])
(jdbc/create-table-ddl :patrons [[:id :serial] [:first_name "Dominic"]])
(jdbc/create-table-ddl :patrons [[:id :serial] [:first_name "varchar(60)"] [:last_name "varchar(60)"]])
(-main)
(System/getenv "HOME")
(System/currentTimeMillis)
System/currentTimeMillis
(-main)
(require '[clojure.data.json :as json])
(json/write-str {:nil nil})
(json/write-str {:nil null})
null
